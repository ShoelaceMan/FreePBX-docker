# Use Debian Bookworm as the base image
FROM debian:bookworm

# Set environment variables
ENV DEBIAN_FRONTEND=noninteractive

# Add requisite packages
RUN apt-get update && apt-get install -y wget software-properties-common

# Add PHP repositories
RUN add-apt-repository -y -S "deb [ arch=amd64 ] https://packages.sury.org/php/ bookworm main" && \
    apt-key del "9641 7C6E 0423 6E0A 986B  69EF DE82 7447 3C8D 0E52" && \
    wget -qO - http://deb.freepbx.org/gpg/aptly-pubkey.asc | gpg --dearmor --yes -o /etc/apt/trusted.gpg.d/freepbx.gpg

# Add Sangoma repositories
RUN add-apt-repository -y -S "deb [ arch=amd64 ] http://deb.freepbx.org/freepbx17-prod bookworm main" && \
    add-apt-repository -y -S "deb [ arch=amd64 ] http://deb.freepbx.org/freepbx17-prod bookworm main"

# Add mongo repositories
RUN wget -qO - https://pgp.mongodb.com/server-7.0.asc | gpg  --dearmor --yes -o /etc/apt/trusted.gpg.d/mongodb-server-7.0.gpg && \
    add-apt-repository -y -S "deb [ arch=amd64 ] http://repo.mongodb.org/apt/debian bookworm/mongodb-org/7.0 main" && \
    add-apt-repository -y -S "deb http://ftp.debian.org/debian/ stable main non-free non-free-firmware" && \

# Configure apt priorities
COPY ./99sangoma-fpbx-repository /etc/apt/preferences.d/99sangoma-fpbx-repository

# Install and prepare requisite packages
RUN apt-get update && \
    apt-get install -y redis socat gnupg redis-server libsnmp-dev libtonezone-dev libpq-dev liblua5.2-dev libpri-dev libbluetooth-dev libunbound-dev libsybdb5 libspeexdsp-dev libiksemel-dev libresample1-dev libgmime-3.0-dev libc-client2007e-dev dpkg-dev ghostscript libtiff-tools iptables-persistent net-tools rsyslog libavahi-client3 nmap apache2 zip incron chrony wget vim build-essential openssh-server mariadb-server mariadb-client bison flex flite php8.2 php8.2-curl php8.2-zip php8.2-redis php8.2-curl php8.2-cli php8.2-common php8.2-mysql php8.2-gd php8.2-mbstring php8.2-intl php8.2-xml php8.2-bz2 php8.2-ldap php8.2-sqlite3 php8.2-bcmath php8.2-soap php8.2-ssh2 php-pear curl sox libncurses5-dev libssl-dev mpg123 libxml2-dev libnewt-dev sqlite3 libsqlite3-dev pkg-config automake libtool autoconf git unixodbc-dev uuid uuid-dev libasound2-dev libogg-dev libvorbis-dev libicu-dev libcurl4-openssl-dev odbc-mariadb libical-dev libneon27-dev libsrtp2-dev libspandsp-dev sudo subversion libtool-bin python-dev-is-python3 unixodbc libjansson-dev nodejs npm ipset iptables fail2ban htop liburiparser-dev postfix tcpdump sngrep libavdevice-dev tftpd-hpa xinetd lame haproxy screen easy-rsa openvpn sysstat apt-transport-https ca-certificates cron python3-mysqldb default-libmysqlclient-dev at

# OpenVPN EasyRSA configuration
RUN /usr/bin/make-cadir /etc/openvpn/easyrsa3

# Remove files that will be generated by the sysadmin module later
RUN rm -fv /etc/openvpn/easyrsa3/pki/vars || true ; \
    rm -f /etc/openvpn/easyrsa3/vars

# Install mongodb
RUN apt-get install -y mongodb-org

# Install libfdk-aac2
RUN apt-get install -y libfdk-aac2

# Set up folders and asterisk config
RUN groupadd -r asterisk && useradd -r -g asterisk -d /home/asterisk -M -s /bin/bash asterisk && \
    mkdir -p /tftpboot && \
    mkdir -p /var/lib/asterisk/sounds

# Configure openssl to make it compatible with the katana
RUN sed -i -e 's/^openssl_conf = openssl_init$/openssl_conf = default_conf/' /etc/ssl/openssl.cnf
COPY ./openssl.cnf /etc/ssl/openssl.cnf

# Setting higher precedence value to ipv4
RUN sed -i 's/^#\s*precedence ::ffff:0:0\/96  100/precedence ::ffff:0:0\/96  100/' /etc/gai.conf

# Correcting apt precedence configuration
COPY ./00freepbx /etc/apt/apt.conf.d/00freepbx

# Install asterisk
RUN apt-get install -y asterisk21 && \
    apt-get install -y asterisk21-addons asterisk21-addons-bluetooth asterisk21-addons-core asterisk21-addons-mysql asterisk21-addons-ooh323 asterisk21-core asterisk21-curl asterisk21-doc asterisk21-odbc asterisk21-ogg asterisk21-flite asterisk21-g729 asterisk21-resample asterisk21-snmp asterisk21-speex asterisk21-sqlite3 asterisk21-res-digium-phone asterisk21-voicemail && \
    apt-get install -y asterisk21.0-freepbx-asterisk-modules asterisk-version-switch asterisk-sounds-*

# Install ioncube
RUN apt-get install -y ioncube-loader-82

# Install freepbx requisites
RUN apt-get -o Dpkg::Options::="--force-overwrite" install -y sysadmin17 sangoma-pbx17 ffmpeg

# Enable freepbx.ini file
RUN /usr/sbin/phpenmod freepbx && \
    mkdir -p /var/lib/php/session

# Creating default config files
RUN mkdir -p /etc/asterisk && \
    touch /etc/asterisk/extconfig_custom.conf && \
    touch /etc/asterisk/extensions_override_freepbx.conf && \
    touch /etc/asterisk/extensions_additional.conf && \
    touch /etc/asterisk/extensions_custom.conf

# Install freepbx17
RUN apt-get install -y freepbx17 && \
    ln -s /var/lib/asterisk/bin/fwconsole /usr/sbin/fwconsole

# Enable required apache2 modules
RUN a2enmod ssl && \
    a2enmod expires && \
    a2enmod rewrite && \
    a2ensite freepbx.conf

# Setting postfilx size to 100MB
RUN /usr/sbin/postconf -e message_size_limit=102400000

# Harden PHP and HTTPD services
RUN sed -i 's/\(^expose_php = \).*/\1Off/' /etc/php/8.2/apache2/php.ini && \
    sed -i 's/\(^ServerTokens \).*/\1Prod/' /etc/apache2/conf-available/security.conf && \
    sed -i 's/\(^ServerSignature \).*/\1Off/' /etc/apache2/conf-available/security.conf

# Updating logrotate settings
RUN sed -i 's/^#dateext/dateext/' /etc/logrotate.conf

# Create necessary directories and logs
RUN mkdir -p /var/run/mysqld /var/log/asterisk /var/log/apache2 && \
    touch /var/log/asterisk/fail2ban /var/log/asterisk/freepbx_security.log /var/log/auth.log /var/log/apache2/error.log /var/log/vsftpd.log /var/log/apache2/*access.log /var/log/fail2ban.log*

# Set permissions
RUN chown -Rv asterisk:asterisk /var/www/html && \
    chown -Rv asterisk:asterisk /etc/asterisk && \
    chown -Rv asterisk:asterisk /tftpboot && \
    chown -Rv asterisk:asterisk /var/lib/asterisk

##################################
# BEGIN STATEFUL REQUISITE STEPS # 
##################################
# These steps need to be ran EVERY TIME that the build kicks off, so we need to bypass cached steps.
# In order to do this, you need to build this container with --build-arg NO_CACHE='someuniquevalue'
#  noting that the value needs to be different every time that the new build kicks off. See the
#  included build.sh for details on how this is possible without manual intervention
#
ARG NO_CACHE=0

# Set default values for arguments not provided explicitly
ARG AMPDBUSER=freepbxuser
ARG AMPDBPORT=3306
ARG AMPDBNAME=asterisk
ARG AMPDBENGINE=mysql
ARG DATASOURCE=

# Enforce two arguments to be provided for the build process to function
ARG AMPDBPASS
ARG AMPDBHOST
RUN if [ -z "${AMPDBPASS}" ]; then echo "AMPDBPASS argument is required but not set"; exit 1; fi
RUN if [ -z "${AMPDBHOST}" ]; then echo "AMPDBHOST argument is required but not set"; exit 1; fi

# Temporarily change the permissions for the remote mysql database
RUN apt-get install -y mariadb-client-core && \
    mysql -u root -h ${AMPDBHOST} -e "ALTER USER '${AMPDBUSER}'@'%' IDENTIFIED BY '${AMPDBPASS}'" && \
    mysql -u root -h ${AMPDBHOST} -e "FLUSH PRIVILEGES;"

# Initialize freepbx.conf for image creation
RUN echo "<?php" > /etc/freepbx.conf && \
    echo "// This file was generated at $(date --utc "+%Y-%m-%dT%H:%M:%S%z") by the image creation process" >> /etc/freepbx.conf && \
    echo '$amp_conf["AMPDBUSER"] = "'${AMPDBUSER}'";' >> /etc/freepbx.conf && \
    echo '$amp_conf["AMPDBPASS"] = "'${AMPDBPASS}'";' >> /etc/freepbx.conf && \
    echo '$amp_conf["AMPDBHOST"] = "'${AMPDBHOST}'";' >> /etc/freepbx.conf && \
    echo '$amp_conf["AMPDBPORT"] = "'${AMPDBPORT}'";' >> /etc/freepbx.conf && \
    echo '$amp_conf["AMPDBNAME"] = "'${AMPDBNAME}'";' >> /etc/freepbx.conf && \
    echo '$amp_conf["AMPDBENGINE"] = "'${AMPDBENGINE}'";' >> /etc/freepbx.conf && \
    echo '$amp_conf["datasource"] = "'${DATASOURCE}'";' >> /etc/freepbx.conf && \
    echo "require_once('/var/www/html/admin/bootstrap.php');" >> /etc/freepbx.conf && \
    echo "?>" >> /etc/freepbx.conf

# Launch daemons for image creation
RUN asterisk -f -U asterisk -G asterisk -vvvg -c & \
    until asterisk -rx 'core show version'; do :;done && \
    fwconsole start --no-interaction --no-ansi --skipchown

# Installing default modules and refresh signatures
RUN fwconsole ma install userman && \
    fwconsole ma installlocal && \
    fwconsole ma upgradeall && \
    fwconsole ma refreshsignatures

# Add custom files to the container
COPY ./entrypoint.sh /entrypoint.sh

# Finalize the installation before ending
# TODO: Make this suck a lot less
RUN curl 192.168.222.195/full_backup.tar.gz | tar -xz -C / || true

# Remove build-time directories
RUN rm -rfv /etc/asterisk/ && \
    rm -rfv /var/log/asterisk && \
    rm -rfv /var/log/apache2 && \
    rm -rfv /var/lib/asterisk/moh && \
    rm -rfv /var/lib/asterisk/sounds/en/custom && \
    rm -rfv /etc/ssl/asterisk && \
    rm -rfv /etc/nftables.d && \
    rm -rfv /var/spool/asterisk

# Link to the run-time directories
RUN ln -s /data/etc/asterisk /etc/asterisk && \
    ln -s /data/var/lib/asterisk/moh /var/lib/asterisk/moh && \
    ln -s /data/var/lib/asterisk/sounds/en/custom /var/lib/asterisk/sounds/en/custom && \
    ln -s /data/etc/ssl/asterisk /etc/ssl/asterisk && \
    ln -s /data/etc/nftables.d /etc/nftables.d && \
    ln -s /data/var/spool/asterisk /var/spool/asterisk && \
    ln -s /data/var/lib/asterisk/sounds/en/custom /var/lib/asterisk/sounds/en/custom

# Clean up after ourselves
#RUN rm -fv /tmp/sng_freepbx_debian_install.sh && \
#    rm -rfv /var/log/README && \
#    rm -rfv /var/log/fontconfig.log && \
#    rm -rfv /var/log/journal && \
#    rm -rfv /var/log/sysstat && \
#    rm -rfv /var/log/wtmp && \
#    rm -rfv /var/log/runit && \
#    rm -rfv /var/log/private && \
#    rm -rfv /var/log/lastlog && \
#    rm -rfv /var/log/freepbx_rpm_install.log && \
#    rm -rfv /var/log/faillog && \
#    rm -rfv /var/log/dpkg.log && \
#    rm -rfv /var/log/auth.log && \
#    rm -rfv /var/log/apt && \
#    rm -rfv /var/cache/*/* && \
#    rm -fv /tmp/systemctl.log && \
#    rm -rfv /var/lib/apt/lists/* && \
#    rm -rfv /usr/share/man/* && \
#    rm -fv /var/www/html/index.html

#RUN apt-get -y clean && \
#    apt-get remove -y wget systemd mariadb-client-core
#RUN apt-get autoremove -y
RUN fwconsole stop --immediate --no-ansi || true ; \
    apachectl stop || true

# "Mask" the systemctl binary
RUN rm -rf /usr/bin/systemctl && \
    ln -s /usr/bin/true /usr/bin/systemctl

# Add some build-time information
RUN echo "$(date --utc "+%Y-%m-%dT%H:%M:%S%z")" >> /build-date

# Set the entrypoint to init the system
ENTRYPOINT ["/entrypoint.sh"]
